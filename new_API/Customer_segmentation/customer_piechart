from flask import Flask, jsonify, send_from_directory
import mysql.connector
import pandas as pd
from kmodes.kprototypes import KPrototypes
from sklearn.preprocessing import LabelEncoder
import os

app = Flask(__name__)

def fetch_customer_data():
    conn = mysql.connector.connect(
        host='103.219.251.246',
        user='braincor_ps01',
        password='Bangkit12345.',
        database='braincor_ps01'
    )

    query = """
        SELECT ID, customer_name, gender, age, job, segment, total_spend, previous_purchase FROM customers
    """

    cursor = conn.cursor()
    cursor.execute(query)
    data = cursor.fetchall()
    cursor.close()
    conn.close()

    columns = ['ID', 'customer_name', 'gender', 'age', 'job', 'segment', 'total_spend', 'previous_purchase']
    customer_df = pd.DataFrame(data, columns=columns)
    
    return customer_df

def preprocess_data(customer_df):
    df = customer_df.drop(['ID', 'customer_name'], axis=1)
    le = LabelEncoder()
    for column in ['gender', 'job', 'segment']:
        df[column] = le.fit_transform(df[column])
    return df, customer_df['ID']

def apply_kprototypes(df, n_clusters=5):
    kproto = KPrototypes(n_clusters=n_clusters, init='Huang', random_state=42)
    clusters = kproto.fit_predict(df, categorical=[0, 2, 3])
    return clusters, kproto

def update_database_with_clusters(ids, clusters):
    conn = mysql.connector.connect(
        host='103.219.251.246',
        user='braincor_ps01',
        password='Bangkit12345.',
        database='braincor_ps01'
    )

    cursor = conn.cursor()

    update_query = """
        UPDATE customers
        SET membership = %s
        WHERE ID = %s
    """

    # Define the cluster labels
    cluster_labels = {2: 'bronze', 3: 'silver', 1: 'gold', 4: 'platinum', 0: 'diamond'}

    # Convert clusters to their respective labels
    data_to_update = [(cluster_labels[clusters[i]], int(ids[i])) for i in range(len(ids))]

    cursor.executemany(update_query, data_to_update)
    conn.commit()
    cursor.close()
    conn.close()

@app.route('/')
def index():
    return '''<h1>Welcome to the Customer Clustering API</h1>
              <p>Use the endpoint <code>/api/cluster_counts</code> to get cluster counts.</p>'''

@app.route('/api/cluster_counts', methods=['GET'])
def get_cluster_counts():
    # Fetch customer data
    customer_df = fetch_customer_data()
    
    # Preprocess the data
    df, ids = preprocess_data(customer_df)
    
    # Apply K-Prototypes
    clusters, kproto = apply_kprototypes(df, n_clusters=5)
    
    # Update database with new cluster labels
    update_database_with_clusters(ids, clusters)
    
    # Get cluster counts
    cluster_labels = {2: 'bronze', 3: 'silver', 1: 'gold', 4: 'platinum', 0: 'diamond'}
    df['Cluster'] = clusters
    df['Cluster_Label'] = df['Cluster'].map(cluster_labels)
    cluster_counts = df['Cluster_Label'].value_counts().reindex(cluster_labels.values(), fill_value=0)
    
    # Convert the counts to a list
    series = cluster_counts.tolist()
    
    # Prepare the output for frontend usage
    result = {
        'series': series,
        'labels': list(cluster_labels.values())
    }
    
    return jsonify(result)

@app.route('/favicon.ico')
def favicon():
    return send_from_directory(os.path.join(app.root_path, 'static'), 'favicon.ico', mimetype='image/vnd.microsoft.icon')

if __name__ == '__main__':
    app.run(debug=True)
