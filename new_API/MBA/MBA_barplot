from flask import Flask, jsonify
import mysql.connector
import pandas as pd
from mlxtend.frequent_patterns import apriori, association_rules
from mlxtend.preprocessing import TransactionEncoder
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

def fetch_orders_data():
    conn = mysql.connector.connect(
        host="localhost",
        user="root",
        password="root",
        database="pos_7"
    )

    query = """
        SELECT ID, order_date, ship_date, customer_id, product_id, product_name FROM orders
    """

    cursor = conn.cursor()
    cursor.execute(query)
    data = cursor.fetchall()
    cursor.close()
    conn.close()

    columns = ['ID', 'order_date', 'ship_date', 'customer_id', 'product_id', 'product_name']
    orders_df = pd.DataFrame(data, columns=columns)
    
    return orders_df

def market_basket_analysis(orders_df):
    orders_df = orders_df.copy()
    orders_df['order_date'] = pd.to_datetime(orders_df['order_date'])
    transactions = orders_df.groupby(['customer_id'])['product_name'].apply(list).reset_index()
    transaction_list = transactions['product_name'].tolist()
    transaction_encoder = TransactionEncoder()
    transaction_encoder_ary = transaction_encoder.fit(transaction_list).transform(transaction_list)
    transaction_df = pd.DataFrame(transaction_encoder_ary, columns=transaction_encoder.columns_)
    
    frequent_itemsets = apriori(transaction_df, min_support=0.001, use_colnames=True)
    if not frequent_itemsets.empty:
        rules = association_rules(frequent_itemsets, metric="lift", min_threshold=0.001)
        rules = rules[rules['confidence'] < 1]
        rules = rules.drop_duplicates(subset=['lift'], keep='first')
        rules['count'] = rules.apply(lambda row: sum(transaction_df[list(row['antecedents'])].all(axis=1) & transaction_df[list(row['consequents'])].all(axis=1)), axis=1)
        rules['basket_pair'] = rules['antecedents'].apply(lambda x: ', '.join([f"{item}" for item in list(x)])) + " -> " + rules['consequents'].apply(lambda x: ', '.join(list(x)))
        return rules
    else:
        return pd.DataFrame()

def filter_unique_pairs(rules):
    seen_pairs = set()
    unique_rules = []

    for _, rule in rules.iterrows():
        antecedents = set(rule['antecedents'])
        consequents = set(rule['consequents'])
        combined_set = antecedents.union(consequents)

        if not any(combined_set.intersection(seen_pair) for seen_pair in seen_pairs):
            seen_pairs.add(frozenset(combined_set))
            unique_rules.append(rule)

    return pd.DataFrame(unique_rules)

@app.route('/api/top_rules', methods=['GET'])
def get_top_rules():
    orders_df = fetch_orders_data()
    rules = market_basket_analysis(orders_df)
    filtered_rules = filter_unique_pairs(rules)
    top_rules = filtered_rules.nlargest(5, 'lift')[['basket_pair', 'lift']]

    response = {
        "categories": top_rules['basket_pair'].tolist(),
        "values": top_rules['lift'].tolist()
    }

    return jsonify(response)

if __name__ == '__main__':
    app.run(debug=True)
