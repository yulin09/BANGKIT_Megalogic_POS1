import json
import os
import seaborn as sns
import matplotlib.pyplot as plt
from datetime import datetime

# Visualize the results and save to JSON
def visualize_clusters(df, clusters, kproto):
    df['Cluster'] = clusters
    
    # Assign labels to clusters
    cluster_labels = {2: 'bronze', 3: 'silver', 1: 'gold', 4: 'platinum', 0: 'diamond'}
    df['Cluster_Label'] = df['Cluster'].map(cluster_labels)
    
    # Save cluster assignment results to JSON file
    results = df.to_dict(orient='records')
    with open('cluster_results.json', 'w') as f:
        json.dump(results, f)
    
    # Define cluster colors
    cluster_colors = {
        'bronze': 'brown',
        'silver': 'silver',
        'gold': 'gold',
        'platinum': 'green',
        'diamond': 'blue'
    }

    # Ensure the directory exists
    os.makedirs('static', exist_ok=True)
    
    # Define filenames based on your pattern
    timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
    scatter_timestamp = datetime.now().strftime("%Y%m%d%H%M%S")

    # Pairplot to visualize the clusters
    sns.pairplot(df, hue='Cluster_Label', palette=cluster_colors)
    pairplot_filename = f'static/pairplot_{timestamp}.png'
    plt.savefig(pairplot_filename)
    plt.show()
    plt.close()

    # Bar plots for specified feature distributions
    fig, axes = plt.subplots(1, 2, figsize=(20, 7))
    
    sns.barplot(data=df, x='previous_purchase', y='total_spend', hue='Cluster_Label', palette=cluster_colors, ax=axes[0], errorbar=None)
    axes[0].set_title('Total Spend vs Previous Purchase')
    
    sns.barplot(data=df, x='gender', y='age', hue='Cluster_Label', palette=cluster_colors, ax=axes[1], errorbar=None)
    axes[1].set_title('Age vs Gender')

    barplot_filename = f'static/barplot_{timestamp}.png'
    plt.savefig(barplot_filename)
    plt.show()
    plt.close()

    # Scatter plots for numerical features
    scatter_features = [('age', 'total_spend'), ('age', 'previous_purchase'), ('total_spend', 'previous_purchase')]
    scatterplot_filenames = []
    for x_feature, y_feature in scatter_features:
        plt.figure(figsize=(10, 6))
        sns.scatterplot(data=df, x=x_feature, y=y_feature, hue='Cluster_Label', palette=cluster_colors, s=100, alpha=0.6)
        scatterplot_filename = f'static/scatterplot_{x_feature}_{y_feature}_{scatter_timestamp}.png'
        plt.savefig(scatterplot_filename)
        plt.show()
        plt.close()
        scatterplot_filenames.append(scatterplot_filename)

    return pairplot_filename, barplot_filename, scatterplot_filenames
